// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messagesrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "github.com/wt993638658/simpletk/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageSrvServiceInfo
}

var messageSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageSrv"
	handlerType := (*message.MessageSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageAction": kitex.NewMethodInfo(messageActionHandler, newMessageSrvMessageActionArgs, newMessageSrvMessageActionResult, false),
		"MessageChat":   kitex.NewMethodInfo(messageChatHandler, newMessageSrvMessageChatArgs, newMessageSrvMessageChatResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageSrvMessageActionArgs)
	realResult := result.(*message.MessageSrvMessageActionResult)
	success, err := handler.(message.MessageSrv).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageSrvMessageActionArgs() interface{} {
	return message.NewMessageSrvMessageActionArgs()
}

func newMessageSrvMessageActionResult() interface{} {
	return message.NewMessageSrvMessageActionResult()
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageSrvMessageChatArgs)
	realResult := result.(*message.MessageSrvMessageChatResult)
	success, err := handler.(message.MessageSrv).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageSrvMessageChatArgs() interface{} {
	return message.NewMessageSrvMessageChatArgs()
}

func newMessageSrvMessageChatResult() interface{} {
	return message.NewMessageSrvMessageChatResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageAction(ctx context.Context, req *message.DouyinMessageActionRequest) (r *message.DouyinMessageActionResponse, err error) {
	var _args message.MessageSrvMessageActionArgs
	_args.Req = req
	var _result message.MessageSrvMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageChat(ctx context.Context, req *message.DouyinMessageChatRequest) (r *message.DouyinMessageCharResponse, err error) {
	var _args message.MessageSrvMessageChatArgs
	_args.Req = req
	var _result message.MessageSrvMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
