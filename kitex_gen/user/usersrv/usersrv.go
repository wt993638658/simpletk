// Code generated by Kitex v0.4.4. DO NOT EDIT.

package usersrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "github.com/wt993638658/simpletk/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userSrvServiceInfo
}

var userSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserSrv"
	handlerType := (*user.UserSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":    kitex.NewMethodInfo(registerHandler, newUserSrvRegisterArgs, newUserSrvRegisterResult, false),
		"Login":       kitex.NewMethodInfo(loginHandler, newUserSrvLoginArgs, newUserSrvLoginResult, false),
		"GetUserById": kitex.NewMethodInfo(getUserByIdHandler, newUserSrvGetUserByIdArgs, newUserSrvGetUserByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvRegisterArgs)
	realResult := result.(*user.UserSrvRegisterResult)
	success, err := handler.(user.UserSrv).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvRegisterArgs() interface{} {
	return user.NewUserSrvRegisterArgs()
}

func newUserSrvRegisterResult() interface{} {
	return user.NewUserSrvRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvLoginArgs)
	realResult := result.(*user.UserSrvLoginResult)
	success, err := handler.(user.UserSrv).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvLoginArgs() interface{} {
	return user.NewUserSrvLoginArgs()
}

func newUserSrvLoginResult() interface{} {
	return user.NewUserSrvLoginResult()
}

func getUserByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvGetUserByIdArgs)
	realResult := result.(*user.UserSrvGetUserByIdResult)
	success, err := handler.(user.UserSrv).GetUserById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvGetUserByIdArgs() interface{} {
	return user.NewUserSrvGetUserByIdArgs()
}

func newUserSrvGetUserByIdResult() interface{} {
	return user.NewUserSrvGetUserByIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.DouyinUserRegisterRequest) (r *user.DouyinUserRegisterResponse, err error) {
	var _args user.UserSrvRegisterArgs
	_args.Req = req
	var _result user.UserSrvRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.DouyinUserRegisterRequest) (r *user.DouyinUserRegisterResponse, err error) {
	var _args user.UserSrvLoginArgs
	_args.Req = req
	var _result user.UserSrvLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserById(ctx context.Context, req *user.DouyinUserRequest) (r *user.DouyinUserResponse, err error) {
	var _args user.UserSrvGetUserByIdArgs
	_args.Req = req
	var _result user.UserSrvGetUserByIdResult
	if err = p.c.Call(ctx, "GetUserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
