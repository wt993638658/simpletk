// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoritesrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	favorite "github.com/wt993638658/simpletk/kitex_gen/favorite"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteSrvServiceInfo
}

var favoriteSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteSrv"
	handlerType := (*favorite.FavoriteSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newFavoriteSrvFavoriteActionArgs, newFavoriteSrvFavoriteActionResult, false),
		"FavoriteList":   kitex.NewMethodInfo(favoriteListHandler, newFavoriteSrvFavoriteListArgs, newFavoriteSrvFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteSrvFavoriteActionArgs)
	realResult := result.(*favorite.FavoriteSrvFavoriteActionResult)
	success, err := handler.(favorite.FavoriteSrv).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteSrvFavoriteActionArgs() interface{} {
	return favorite.NewFavoriteSrvFavoriteActionArgs()
}

func newFavoriteSrvFavoriteActionResult() interface{} {
	return favorite.NewFavoriteSrvFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteSrvFavoriteListArgs)
	realResult := result.(*favorite.FavoriteSrvFavoriteListResult)
	success, err := handler.(favorite.FavoriteSrv).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteSrvFavoriteListArgs() interface{} {
	return favorite.NewFavoriteSrvFavoriteListArgs()
}

func newFavoriteSrvFavoriteListResult() interface{} {
	return favorite.NewFavoriteSrvFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, req *favorite.DouyinFavoriteActionRequest) (r *favorite.DouyinFavoriteActionResponse, err error) {
	var _args favorite.FavoriteSrvFavoriteActionArgs
	_args.Req = req
	var _result favorite.FavoriteSrvFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *favorite.DouyinFavoriteListRequest) (r *favorite.DouyinFavoriteListResponse, err error) {
	var _args favorite.FavoriteSrvFavoriteListArgs
	_args.Req = req
	var _result favorite.FavoriteSrvFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
