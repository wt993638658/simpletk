// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationsrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "github.com/wt993638658/simpletk/kitex_gen/relation"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationSrvServiceInfo
}

var relationSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationSrv"
	handlerType := (*relation.RelationSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":       kitex.NewMethodInfo(relationActionHandler, newRelationSrvRelationActionArgs, newRelationSrvRelationActionResult, false),
		"RelationFollowList":   kitex.NewMethodInfo(relationFollowListHandler, newRelationSrvRelationFollowListArgs, newRelationSrvRelationFollowListResult, false),
		"RelationFollowerList": kitex.NewMethodInfo(relationFollowerListHandler, newRelationSrvRelationFollowerListArgs, newRelationSrvRelationFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationSrvRelationActionArgs)
	realResult := result.(*relation.RelationSrvRelationActionResult)
	success, err := handler.(relation.RelationSrv).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationSrvRelationActionArgs() interface{} {
	return relation.NewRelationSrvRelationActionArgs()
}

func newRelationSrvRelationActionResult() interface{} {
	return relation.NewRelationSrvRelationActionResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationSrvRelationFollowListArgs)
	realResult := result.(*relation.RelationSrvRelationFollowListResult)
	success, err := handler.(relation.RelationSrv).RelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationSrvRelationFollowListArgs() interface{} {
	return relation.NewRelationSrvRelationFollowListArgs()
}

func newRelationSrvRelationFollowListResult() interface{} {
	return relation.NewRelationSrvRelationFollowListResult()
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationSrvRelationFollowerListArgs)
	realResult := result.(*relation.RelationSrvRelationFollowerListResult)
	success, err := handler.(relation.RelationSrv).RelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationSrvRelationFollowerListArgs() interface{} {
	return relation.NewRelationSrvRelationFollowerListArgs()
}

func newRelationSrvRelationFollowerListResult() interface{} {
	return relation.NewRelationSrvRelationFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *relation.DouyinRelationActionRequest) (r *relation.DouyinRelationActionResponse, err error) {
	var _args relation.RelationSrvRelationActionArgs
	_args.Req = req
	var _result relation.RelationSrvRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, req *relation.DouyinRelationFollowListRequest) (r *relation.DouyinRelationFollowListResponse, err error) {
	var _args relation.RelationSrvRelationFollowListArgs
	_args.Req = req
	var _result relation.RelationSrvRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, req *relation.DouyinRelationFollowerListRequest) (r *relation.DouyinRelationFollowerListResponse, err error) {
	var _args relation.RelationSrvRelationFollowerListArgs
	_args.Req = req
	var _result relation.RelationSrvRelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
