// Code generated by Kitex v0.4.4. DO NOT EDIT.

package publishsrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	publish "github.com/wt993638658/simpletk/kitex_gen/publish"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishSrvServiceInfo
}

var publishSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishSrv"
	handlerType := (*publish.PublishSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishAction": kitex.NewMethodInfo(publishActionHandler, newPublishSrvPublishActionArgs, newPublishSrvPublishActionResult, false),
		"PublishList":   kitex.NewMethodInfo(publishListHandler, newPublishSrvPublishListArgs, newPublishSrvPublishListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "publish",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishSrvPublishActionArgs)
	realResult := result.(*publish.PublishSrvPublishActionResult)
	success, err := handler.(publish.PublishSrv).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishSrvPublishActionArgs() interface{} {
	return publish.NewPublishSrvPublishActionArgs()
}

func newPublishSrvPublishActionResult() interface{} {
	return publish.NewPublishSrvPublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishSrvPublishListArgs)
	realResult := result.(*publish.PublishSrvPublishListResult)
	success, err := handler.(publish.PublishSrv).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishSrvPublishListArgs() interface{} {
	return publish.NewPublishSrvPublishListArgs()
}

func newPublishSrvPublishListResult() interface{} {
	return publish.NewPublishSrvPublishListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishAction(ctx context.Context, req *publish.DouyinPublishActionRequest) (r *publish.DouyinPublishActionResponse, err error) {
	var _args publish.PublishSrvPublishActionArgs
	_args.Req = req
	var _result publish.PublishSrvPublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *publish.DouyinPublishListRequest) (r *publish.DouyinPublishListResponse, err error) {
	var _args publish.PublishSrvPublishListArgs
	_args.Req = req
	var _result publish.PublishSrvPublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
